{
  // Place your daily-rusk workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "manifestpwa": {
    "prefix": "manifestpwa",
    "body": [
      "{",
      "  \"short_name\": \"dailyRusk\",",
      "  \"name\": \"Daily rusk feed\",",
      "  \"icons\": [",
      "    {",
      "      \"src\": \"images/rusk192x192.png\",",
      "      \"sizes\": \"192x192\",",
      "      \"type\": \"image/png\",",
      "      \"purpose\": \"maskable\"",
      "    },",
      "    {",
      "      \"src\": \"images/rusk512x512.png\",",
      "      \"sizes\": \"512x512\",",
      "      \"type\": \"image/png\"",
      "    }",
      "  ],",
      "  \"start_url\": \"/\",",
      "  \"display\": \"standalone\",",
      "  \"theme_color\": \"#ffffff\",",
      "  \"background_color\": \"#ffffff\"",
      "}"
    ],
    "description": ""
  },
  "swregistration": {
    "prefix": "swregistration",
    "body": [
      "export const registerServiceWorker = () => {",
      "    if ('serviceWorker' in navigator) {",
      "      window.addEventListener('load', () => {",
      "        navigator.serviceWorker.register('/service-worker.js').then(",
      "          (registration) => {",
      "            console.log(",
      "              'ServiceWorker registration successful with scope: ',",
      "              registration.scope",
      "            );",
      "          },",
      "          (err) => {",
      "            console.log('ServiceWorker registration failed: ', err);",
      "          }",
      "        );",
      "      });",
      "    }",
      "  }"
    ],
    "description": ""
  },
  "swimplementation": {
    "prefix": "swimplementation",
    "body": [
      "/* eslint-disable */",
      "const APPSHELL_CACHE_NAME = 'dailyRusk-appshell-v1';",
      "const MEDIA_CACHE_NAME = 'dailyRusk-media';",
      "",
      "const urlsToCache = [",
      "    '/',",
      "    '/app.js',",
      "    '/style.bundle.css',",
      "    '/images/rusk_logo.png',",
      "    'https://fonts.googleapis.com/css?family=Inconsolata|Montserrat',",
      "];",
      "",
      "self.addEventListener('install', (event) => {",
      "    event.waitUntil(",
      "        caches.open(APPSHELL_CACHE_NAME)",
      "            .then(cache => cache.addAll(urlsToCache))",
      "    );",
      "});",
      "",
      "self.addEventListener('activate', (event) => {",
      "    event.waitUntil(",
      "        caches.keys().then(keys => Promise.all(keys.filter(key => key.startsWith('dailyRusk') && key !== APPSHELL_CACHE_NAME && key !== MEDIA_CACHE_NAME).map(key => caches.delete(key))))",
      "    );",
      "});",
      "",
      "self.addEventListener('fetch', (event) => {",
      "    const request = event.request;",
      "    if (request.url.endsWith('.jpg')) {",
      "        event.respondWith(",
      "            caches.open(MEDIA_CACHE_NAME).then((cache) =>",
      "                cache.match(request).then((imgresponse) => {",
      "                    if (imgresponse) return imgresponse;",
      "",
      "                    return fetch(request).then((img) => {",
      "                        cache.put(request, img.clone());",
      "                        return img;",
      "                    })",
      "                })",
      "            )",
      "        )",
      "    } else {",
      "        event.respondWith(",
      "            caches.match(event.request).then((response) => {",
      "                if (response) return response;",
      "                return fetch(event.request);",
      "            })",
      "        );",
      "    }",
      "});",
      "",
      "self.addEventListener('message', (event) => {",
      "    if (event.data.skipWaiting) {",
      "        self.skipWaiting();",
      "    }",
      "});"
    ],
    "description": ""
  }
}
